class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m=len(matrix)
        n=len(matrix[0])
        dp=[[0]*n for i in range(m)]
        
        def dfs(i,j):
            if not dp[i][j]:
                cur=matrix[i][j]
                if j and cur > matrix[i][j-1]: left=dfs(i,j-1)
                else: left=0
                if j<n-1 and cur > matrix[i][j+1]: right=dfs(i,j+1)
                else: right=0
                if i and cur > matrix[i-1][j]: up=dfs(i-1,j)
                else: up=0
                if i<m-1 and cur > matrix[i+1][j]: down=dfs(i+1,j)
                else: down=0
                dp[i][j]=1+max(left,right,up,down)
            return dp[i][j]
        
        res=[]
        for i in range(m):
            for j in range(n):
                res.append(dfs(i,j))
        return max(res)
